# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints
*.ipynb

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.local
.env.development
.env.testing
.env.staging
.env.production
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is generally recommended to exclude the entire .idea/ directory.
.idea/
*.iml
*.iws
*.ipr

# Visual Studio Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Desktop.ini
$RECYCLE.BIN/

# Linux
*~

# Project specific

# Data directories (exclude large datasets but keep structure)
data/raw/*
!data/raw/.gitkeep
data/processed/*
!data/processed/.gitkeep
data/models/*
!data/models/.gitkeep
data/test_datasets/*
!data/test_datasets/.gitkeep

# Logs
logs/
*.log
log_*.txt

# Database files
*.db
*.sqlite
*.sqlite3

# Redis dumps
dump.rdb

# Model files and checkpoints
*.pth
*.pkl
*.joblib
*.model
checkpoints/
saved_models/

# API keys and secrets
secrets/
.secrets
api_keys.txt
credentials.json
service_account.json

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Download cache
downloads/
cache/

# Scraped data (often large and regeneratable)
scraped_data/
crawl_data/

# Annotation exports
annotations_export/
labeled_data_export/

# Docker
.dockerignore

# Kubernetes
k8s-secrets/

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Documentation builds
docs/build/
site/

# Backup files
*.backup
*.bak
backup_*

# Editor specific
*.sublime-project
*.sublime-workspace
.vscode/settings.json
.vscode/launch.json
.vscode/extensions.json

# Profiling
*.prof
*.profile

# Memory dumps
*.hprof
*.dump

# Performance monitoring
perf.data

# Local development overrides
docker-compose.override.yml
local_config.yaml
dev_settings.py

# Machine learning experiment tracking
mlruns/
wandb/
.neptune/

# Jupyter notebook outputs (keep notebooks but not outputs)
# Uncomment if you want to version control notebooks without outputs
# *.ipynb

# Spacy models (downloaded at runtime)
en_core_web_lg/
en_core_web_sm/

# NLTK data (downloaded at runtime)
nltk_data/

# Hugging Face cache
.cache/huggingface/

# PyTorch model cache
.cache/torch/

# Testing artifacts
.pytest_cache/
.coverage
htmlcov/
test-results/
test_output/

# Local SSL certificates
ssl/
certs/
*.pem
*.key
*.crt

# Local database backups
db_backups/
*.sql.gz

# Environment-specific configs
config/local/
local_settings/

# IDE generated files
.project
.pydevproject
.settings/

# Profiling output
*.py.profile
*.py.lprof

# Benchmarking results
benchmark_results/
performance_logs/

# Local scripts (often contain sensitive info or are machine-specific)
local_scripts/
dev_scripts/

# Temporary annotation files
annotations_temp/
annotation_backup/

# Local model experiments
experiments/
model_experiments/

# Generated documentation
api_docs/
generated_docs/

# Local configuration overrides
*.local.yaml
*.local.json
local_*.py

# Archive files
*.zip
*.tar.gz
*.rar
*.7z

# Large datasets (reference but don't commit)
large_datasets/
training_data/

# Monitoring and logging
monitoring_data/
metrics/
alerts/

# Build artifacts
build/
dist/
*.egg-info/

# Package manager artifacts
node_modules/
package-lock.json
yarn.lock

# Frontend build (if adding web interface later)
static/dist/
static/build/

# Local development databases
dev.db
test.db
local.db